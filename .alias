alias editprofile='code ~/.bash_profile'
alias editvars='code ~/.vars'
alias editalias='code ~/.alias'
alias eset='code ~/.custom_settings'
alias la='ls -a'
alias checkout='git checkout'
alias gaa='git add -A'
alias gcwip='git add -A && git commit -m WIP'
alias gamend='git add -A && git commit --amend'
alias turbostash='git add -A && git stash'
alias qpush='git add -A && git commit -m Quick_Push && git push'
alias fpush='git push --force origin $(git rev-parse --abbrev-ref HEAD)'
alias db:recreate='./BlueWave\ Database\ Recreate.bat'
alias db:recreate-dev='./BlueWave\ Database\ Recreate\ Dev.bat'
alias rebash='. ~/.vars && . ~/.alias && . ~/.custom_settings'
alias untar='tar -zxvf'
alias sinst='sudo apt-get install'
alias sql:cmd='SQLCMD -E -S $SQL_PROJECT_SERVER -Q '
alias tf_upgrade='python ~/git/devstuff/tensorflow/tensorflow/tools/compatibility/tf_upgrade.py'
alias openssl_path='/usr/lib/ssl/openssl.cnf'

ssh:forefront(){
    ssh -i ~/.ssh/azure_ubuntu forefront@52.163.58.130
}

selfsign(){
    mkdir $1
    cd $1
    openssl genrsa -out key.pem 4096
    openssl req -new -sha256 -key key.pem -out csr.csr
    openssl req -x509 -sha256 -days 365 -key key.pem -in csr.csr -out cert.pem
    openssl pkcs12 -inkey key.pem -in cert.pem -export -out pfx.pfx
}

pullall(){
    for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master `; do
	git branch --track ${branch#remotes/origin/} $branch
    done
}

ICU_UAT_SERVER=ubuntu@ec2-52-62-220-44.ap-southeast-2.compute.amazonaws.com
ICU_PROD_SERVER=ubuntu@ec2-54-206-102-33.ap-southeast-2.compute.amazonaws.com
ICU_SSH_KEY='icuServerKeyPairSydney.pem'

ssh:icutest(){
    cd ~/.ssh
    ssh -i $ICU_SSH_KEY $ICU_UAT_SERVER
}

ssh:icuprod(){
    cd ~/.ssh
    ssh -i $ICU_SSH_KEY $ICU_PROD_SERVER
}

im:convert(){
    ~/bin/ImageMagick/bin/convert.exe $1 $2 $3 $4 $5 $6
}

ff:core(){
    (cd ~/forefront/api/src/ForeFrontCoreData && dotnet $1) 
    (cd ~/forefront/api/src/ForeFrontCoreUsers && dotnet $1) 
    (cd ~/forefront/api/src/ForeFrontCoreWeb && dotnet $1) 
}

db:migrate (){
    $RAVEN_PROJECT_PATH/$UPDATE_SCRIPT_NAME
}

db:backup (){
    sql:cmd "BACKUP DATABASE BlueWave TO DISK='"$SQL_TEMP_LOCATION$(date +%s).bak"'"
}

db:restore (){
    if [ -z "$1" ]
    then
        RESTORE_TARGET=$SQL_PROJECT_BACKUP
    else
        RESTORE_TARGET=$1
    fi
    sql:cmd "ALTER DATABASE BlueWave SET single_user WITH ROLLBACK immediate;
             DROP DATABASE BLueWave;"
    sql:cmd "RESTORE DATABASE "$SQL_PROJECT_NAME" FROM DISK='"$RESTORE_TARGET"'
             WITH FILE = 1,
             MOVE N'"$SQL_PROJECT_NAME"' TO N'"$SQL_DATA_PATH"BlueWave.mdf',
             MOVE N'"$SQL_PROJECT_NAME"_log' TO N'"$SQL_DATA_PATH"BlueWave_Log.mdf'"
    #sql:cmd "ALTER AUTHORIZATION ON DATABASE::"$SQL_PROJECT_NAME" TO "$PROJECT_APPPOOL_USER
}

db:recreate () {
    sql:cmd "BACKUP DATABASE BlueWave TO DISK='"$SQL_TEMP_LOCATION"'"
    sql:cmd "ALTER DATABASE BlueWave SET single_user WITH ROLLBACK immediate;
             DROP DATABASE BLueWave;"
    sql:cmd "RESTORE DATABASE "$SQL_PROJECT_NAME" FROM DISK='"$SQL_PROJECT_BACKUP"'
             WITH FILE = 1,
             MOVE N'"$SQL_PROJECT_NAME"' TO N'"$SQL_DATA_PATH"BlueWave.mdf',
             MOVE N'"$SQL_PROJECT_NAME"_log' TO N'"$SQL_DATA_PATH"BlueWave_Log.mdf'"
    #sql:cmd "ALTER AUTHORIZATION ON DATABASE::"$SQL_PROJECT_NAME" TO "$PROJECT_APPPOOL_USER
    db:migrate
}

remaster (){
    git add -A
    git commit -m 'Auto commit before merge in master'
    THIS_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    git pull origin $THIS_BRANCH
    git checkout master
    git pull origin master
    git checkout $THIS_BRANCH
    git merge master
    git push --set-upstream origin $THIS_BRANCH
}

git:cleanup (){
    echo "This Will throw error \"fatal: branch name required\" if there are no branchs that will be cleaned"
    THIS_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    git checkout master
    git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d
    git checkout $THIS_BRANCH
}

pushup (){
    THIS_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    git push --set-upstream origin $THIS_BRANCH
}

selfsign (){
	openssl req \
    -newkey rsa:2048 \
    -x509 \
    -nodes \
    -keyout $1.key \
    -new \
    -out $1.crt \
    -subj /CN=$1 \
    -reqexts SAN \
    -extensions SAN \
    -config <(cat /usr/lib/ssl/openssl.cnf \
        <(printf '[SAN]\nsubjectAltName=DNS:'$1)) \
    -sha256 \
    -days 3650

    openssl pkcs12 -export -out $1.pfx -inkey $1.key -in $1.crt -name $1
    cp $1.key /c/Temp/
    cp $1.crt /c/Temp/
    cp $1.pfx /c/Temp/
}

vartest (){
	echo $1
	echo $1.dop
}

echo "Alias's Updated"
